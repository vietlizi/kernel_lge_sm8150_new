name: "Compile kernel"

on:
  workflow_dispatch:

jobs:
  Build:
    strategy:
      matrix:
        variants: [aosp_flash]
    runs-on: ubuntu-latest
    steps:
      - name: Setup build env
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential ccache curl flex \
          g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev \
          lib32readline-dev lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev \
          libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc \
          zip zlib1g-dev python3 python3-pip python3-pexpect python3-setuptools python3-serial python3-yaml \
          python-is-python3
      - name: Cache build env
        id: cache-build-env
        uses: actions/cache@v3
        with:
          path: |
            clang
          key: ${{ runner.os }}-android-toolchain

      - name: Pull Android toolchain
        if: steps.cache-build-env.outputs.cache-hit != 'true'
        run: |
          wget -q "$(curl -s https://raw.githubusercontent.com/XSans0/WeebX-Clang/main/main/link.txt)" -O "weebx-clang.tar.gz"
          mkdir clang && tar -xf weebx-clang.tar.gz -C clang && rm -rf weebx-clang.tar.gz
      - name: Save Android toolchain
        if: steps.cache-build-env.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            clang
          key: ${{ runner.os }}-android-toolchain

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: kernel
          submodules: recursive
          fetch-depth: 0

      - name: Build kernel
        id: kernel-build
        continue-on-error: true
        run: |
          export PATH="$(pwd)/clang/bin:$(pwd)/clang/aarch64-linux-gnu/bin:$(pwd)/clang/arm-linux-gnueabi/bin:$PATH"
          cd kernel
          make ARCH=arm64 O=out CC=clang LD=ld.lld CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- CLANG_TRIPLE=aarch64-linux-gnu- vendor/${{ matrix.variants }}_defconfig
          sed -i 's/CONFIG_CC_WERROR=y/CONFIG_CC_WERROR=n/g' out/.config
          yes "" | make ARCH=arm64 O=out CC=clang LD=ld.lld CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- CLANG_TRIPLE=aarch64-linux-gnu- oldconfig
          make -j$(nproc --all) ARCH=arm64 O=out CC=clang LD=ld.lld CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- CLANG_TRIPLE=aarch64-linux-gnu- 2>&1 | tee build.log
      - name: Setup tmate session for debugging
        uses: mxschmitt/action-tmate@v3
        if: steps.kernel-build.conclusion != 'success'

      - name: Upload build artifacts
        if: steps.kernel-build.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: kernel-${{ matrix.variants }}
          path: kernel/out/arch/arm64/boot

      - name: Upload build log
        uses: actions/upload-artifact@v3
        with:
          name: build-log-${{ matrix.variants }}
          path: kernel/build.log
